#===================================================================================
# DRONE SWARM SIMULATION - FANET Research Configuration
#===================================================================================
# Author: Rodrigo Paczkovski
# Institution: University of Santa Catarina (UFSC)
# Program: Master's in Computer Science
# Date: October 2025
# Repository: github.com/ropacz/drone-swarm
#
# Description:
#   Simulation parameters for UAV swarm coordination research using OMNeT++/INET.
#   Focus: Inter-drone communication, mobility patterns, and network performance
#   for Search and Rescue (SAR) operations in disaster scenarios.
#
# Simulation Framework:
#   - OMNeT++ 6.2.0: Discrete event simulation
#   - INET 4.5.4: Internet protocol suite and wireless modeling
#
# Key Technologies:
#   - Network: Flying Ad-Hoc Network (FANET)
#   - Routing: Proactive mesh routing
#   - PHY: IEEE 802.11a @ 5.8 GHz
#   - Mobility: 3D Gauss-Markov model
#   - Application: UDP multicast telemetry
#
# References:
#   [1] Bekmezci et al. (2013) "Flying Ad-Hoc Networks (FANETs): A survey"
#   [2] Yanmaz et al. (2018) "Drone networks: Communications, coordination, and sensing"
#   [3] Hayat et al. (2016) "Survey on UAV networks for disaster relief"
#   [4] Erdelj et al. (2017) "Help from the sky: Leveraging UAVs for disaster management"
#   [5] RFC 3626: Optimized Link State Routing Protocol (OLSR)
#===================================================================================

[General]
network = drone.swarm.DroneSwarmNetwork

# Simulation control
sim-time-limit = 300s                   # 5 minutes (steady-state analysis)
seed-set = ${repetition}                # Reproducible randomness
repeat = 3                              # Statistical significance (min 3, recommend 10-30)
cmdenv-express-mode = true              # Fast execution
result-dir = results                    # Output directory

#===================================================================================
# NETWORK TOPOLOGY
#===================================================================================
# Swarm size: 15 drones + 1 GCS (balanced for 4km² area)
# Density: 15 drones / 16 km² = 0.94 drones/km²
# With 600m radio range, ensures better mesh connectivity
# Ref: [1] Brust et al. (2017) "Target tracking optimization of UAV swarms"
#===================================================================================
*.numDrones = 10                        # 15 UAVs (increased for connectivity)
*.numGCS = 1                            # Single ground control station

#===================================================================================
# MOBILITY MODEL - 3D Gauss-Markov
#===================================================================================
# Characteristics:
#   - Smooth continuous movement (realistic for UAVs)
#   - Memory parameter (alpha) controls temporal correlation
#   - Suitable for coordinated swarm behavior
#
# Ref: [1] Camp et al. (2002) "A survey of mobility models for ad hoc network research"
# Ref: [2] Sanchez-Garcia et al. (2018) "Self-organizing UAV swarm coordination"
#===================================================================================

*.drone[*].mobility.typename = "GaussMarkovMobility"

#-----------------------------------------------------------------------------------
# Operational airspace (4km × 4km SAR area - balanced coverage)
#-----------------------------------------------------------------------------------
# Ref: [3] Hayat et al. (2016) "Survey on UAV networks for disaster relief"
# Ref: [4] Erdelj et al. (2017) "Help from the sky: Leveraging UAVs for disaster management"
# Area: 16 km² (suitable for 15 drones with 600m radio range)
*.drone[*].mobility.constraintAreaMinX = 0m
*.drone[*].mobility.constraintAreaMaxX = 4000m
*.drone[*].mobility.constraintAreaMinY = 0m
*.drone[*].mobility.constraintAreaMaxY = 4000m
*.drone[*].mobility.constraintAreaMinZ = 50m
*.drone[*].mobility.constraintAreaMaxZ = 120m
*.drone[*].mobility.margin = 200m

#-----------------------------------------------------------------------------------
# Speed parameters
#-----------------------------------------------------------------------------------
# Cruise speed: 15 m/s (54 km/h) - energy-efficient for commercial drones
# Ref: DJI Mavic 3: 15-21 m/s, Auterion Skynode: 15-20 m/s
*.drone[*].mobility.speed = 15mps
*.drone[*].mobility.speedStdDev = 0mps
*.drone[*].mobility.angle = uniform(0deg, 360deg)
*.drone[*].mobility.angleStdDev = 30deg

#-----------------------------------------------------------------------------------
# Temporal correlation
#-----------------------------------------------------------------------------------
# Alpha = 0.9: Very high correlation (smoother coordinated movement)
# Range: [0,1] where 0=random walk, 1=linear motion
*.drone[*].mobility.alpha = 0.9
*.drone[*].mobility.updateInterval = 0.5s

#-----------------------------------------------------------------------------------
# Initial positions (concentrated for better initial connectivity)
#-----------------------------------------------------------------------------------
*.drone[*].mobility.initialX = uniform(1000m, 3000m)   # Centered around GCS
*.drone[*].mobility.initialY = uniform(1000m, 3000m)
*.drone[*].mobility.initialZ = uniform(70m, 90m)

#===================================================================================
# PHYSICAL LAYER - IEEE 802.11a @ 5.8 GHz
#===================================================================================
# Technology: IEEE 802.11a in ad-hoc mode
# Frequency: 5.8 GHz ISM band (5.725-5.850 GHz)
# Advantages over 2.4 GHz: less congestion, higher data rates
#
# Ref: [2] Yanmaz et al. (2014) "Experimental performance of aerial 802.11 networks"
# Ref: IEEE 802.11-2016 standard
#===================================================================================

*.drone[*].numWlanInterfaces = 1
*.drone[*].wlan[0].typename = "Ieee80211Interface"
*.drone[*].wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"
*.drone[*].wlan[0].radio.typename = "Ieee80211ScalarRadio"

#-----------------------------------------------------------------------------------
# Radio frequency
#-----------------------------------------------------------------------------------
*.drone[*].wlan[0].radio.bandName = "5 GHz"
*.drone[*].wlan[0].radio.channel = 0
*.drone[*].wlan[0].radio.carrierFrequency = 5.8GHz
*.drone[*].wlan[0].radio.bandwidth = 20MHz

#-----------------------------------------------------------------------------------
# Transmitter (Drones)
#-----------------------------------------------------------------------------------
# Power: 5 mW (7 dBm) - typical for UAV mesh networks
# Expected range: ~300-500m @ 80m altitude
# Ref: Temel & Bekmezci (2017) "LODMAC: Location oriented directional MAC protocol"
*.drone[*].wlan[0].radio.transmitter.power = 5mW

#-----------------------------------------------------------------------------------
# Receiver (Drones)
#-----------------------------------------------------------------------------------
# Sensitivity: -75 dBm (balance between range and power consumption)
# Ref: [2] Yanmaz et al. (2018) "Wireless networking with drones"
*.drone[*].wlan[0].radio.receiver.sensitivity = -75dBm
*.drone[*].wlan[0].radio.receiver.energyDetection = -78dBm
*.drone[*].wlan[0].radio.receiver.snirThreshold = 6dB

#===================================================================================
# PROPAGATION MODEL - Two-Ray Ground Reflection
#===================================================================================
# More realistic than free-space for UAVs at 50-120m altitude
# Accounts for ground reflection effects
#
# Path loss: PL = 40log₁₀(d) - 20log₁₀(ht) - 20log₁₀(hr)
# where d=distance, ht=tx height, hr=rx height
#
# Ref: Rappaport (2002) "Wireless Communications: Principles and Practice"
# Ref: Al-Hourani et al. (2014) "Modeling air-to-ground path loss for low altitude platforms"
#===================================================================================

*.radioMedium.typename = "Ieee80211ScalarRadioMedium"
*.radioMedium.pathLossType = "TwoRayGroundReflection"
*.radioMedium.propagationType = "ConstantSpeedPropagation"

# Range limits (prevent unrealistic communication)
*.radioMedium.rangeFilter = "communicationRange"
*.radioMedium.mediumLimitCache.maxTransmissionRange = 900m
*.radioMedium.mediumLimitCache.maxCommunicationRange = 700m
*.radioMedium.mediumLimitCache.maxInterferenceRange = 1200m

# Background noise (realistic environment)
*.radioMedium.backgroundNoise.power = -90dBm

#===================================================================================
# ROUTING PROTOCOL - AODV (Ad-hoc On-Demand Distance Vector)
#===================================================================================
# AODV: Reactive routing protocol for mobile ad-hoc networks
# Advantages for FANETs:
#   - Low overhead (routes created on-demand)
#   - Fast adaptation to topology changes (drone mobility)
#   - Suitable for sparse networks with intermittent connectivity
#
# Ref: RFC 3561 - Ad hoc On-Demand Distance Vector (AODV) Routing
# Ref: Belding-Royer & Perkins (2003) "Evolution and future directions of the AODV protocol"
# Ref: Rosati et al. (2016) "Dynamic routing for flying ad hoc networks"
#===================================================================================

# Enable AODV routing (INET 4.x method)
*.drone[*].routing.typename = "Aodv"
*.gcs[*].routing.typename = "Aodv"

# AODV parameters (tuned for UAV networks)
*.drone[*].routing.aodv.activeRouteTimeout = 3s           # Route lifetime (mobility-aware)
*.drone[*].routing.aodv.helloInterval = 1s                # Neighbor discovery frequency
*.drone[*].routing.aodv.allowedHelloLoss = 2              # Tolerate 2 missed HELLOs
*.drone[*].routing.aodv.netDiameter = 10                  # Max hops in network
*.drone[*].routing.aodv.rreqRetries = 2                   # Route request retries
*.drone[*].routing.aodv.nodeTraversalTime = 40ms          # Per-hop delay estimate
*.drone[*].routing.aodv.localAddTTL = 2                   # Initial RREQ TTL

# GCS AODV (same as drones for mesh symmetry)
*.gcs[*].routing.aodv.activeRouteTimeout = 3s
*.gcs[*].routing.aodv.helloInterval = 1s
*.gcs[*].routing.aodv.allowedHelloLoss = 2

#===================================================================================
# IPv4 AND MULTICAST CONFIGURATION
#===================================================================================

# IPv4 enabled
*.drone[*].hasIpv4 = true
*.drone[*].ipv4.routingTable.netmaskRoutes = ""

# IPv4 parameters for multi-hop mesh networking
*.drone[*].ipv4.ip.timeToLive = 32                     # Allow multi-hop forwarding
*.drone[*].ipv4.ip.multicastTimeToLive = 5             # Limit multicast to 5 hops (prevent loops)
*.drone[*].ipv4.ip.forwarding = true                   # Enable packet forwarding (mesh relay)
*.drone[*].ipv4.ip.multicastForwarding = true          # Forward multicast packets
*.drone[*].ipv4.ip.multicastLoopback = false           # Disable loopback multicast (save resources)
*.gcs[*].ipv4.ip.timeToLive = 32
*.gcs[*].ipv4.ip.multicastTimeToLive = 5
*.gcs[*].ipv4.ip.forwarding = true
*.gcs[*].ipv4.ip.multicastForwarding = true
*.gcs[*].ipv4.ip.multicastLoopback = false

# Network configurator (AODV handles routing dynamically)
*.configurator.addStaticRoutes = false
*.configurator.addDefaultRoutes = false
*.configurator.addSubnetRoutes = false
*.configurator.addMulticastRoutes = true              # Enable multicast routing
*.configurator.optimizeRoutes = false

#===================================================================================
# APPLICATION LAYER - UDP Telemetry Exchange
#===================================================================================
# Periodic multicast for swarm coordination
#
# Telemetry packet structure (~48 bytes payload):
#   - Position (x,y,z): 12 bytes
#   - Velocity (vx,vy,vz): 12 bytes  
#   - Heading/attitude: 8 bytes
#   - Status/flags: 4 bytes
#   - Timestamp: 8 bytes
#   - Node ID: 4 bytes
#   + Headers (UDP 8B + IP 20B) = ~76 bytes total
#   → Rounded to 150B for extensibility
#
# Update rate: 10 Hz (100ms) - standard for UAV control loops
# Data rate per drone: 150B × 8 × 10Hz = 12 kbps
# Total load (10 drones): ~120 kbps (well below WiFi capacity)
#
# Ref: MAVLink protocol (mavlink.io)
# Ref: Meier et al. (2011) "MAVLink: Micro air vehicle communication protocol"
#===================================================================================

*.drone[*].numApps = 2  # Transmitter + Receiver

# Transmitter (send telemetry)
*.drone[*].app[0].typename = "UdpBasicApp"
*.drone[*].app[0].destAddresses = "224.0.0.1"          # Multicast to all
*.drone[*].app[0].destPort = 4000
*.drone[*].app[0].localPort = 4001                     # Different port!
*.drone[*].app[0].messageLength = 150B
*.drone[*].app[0].sendInterval = exponential(100ms)    # 10 Hz avg (desynchronized)
*.drone[*].app[0].startTime = uniform(1s, 5s)          # Staggered start (reduce collision)
*.drone[*].app[0].stopTime = 295s
*.drone[*].app[0].timeToLive = 5                       # Multicast TTL (5 hops max)
*.drone[*].app[0].multicastInterface = "wlan0"         # CRITICAL: Force WLAN, not loopback

# Receiver (listen to other drones)
*.drone[*].app[1].typename = "UdpSink"
*.drone[*].app[1].localPort = 4000                     # Listen for telemetry

#===================================================================================
# GROUND CONTROL STATION (GCS)
#===================================================================================
# Stationary base station at center of operational area
#===================================================================================

*.gcs[*].mobility.typename = "StationaryMobility"
*.gcs[*].mobility.initFromDisplayString = false
*.gcs[*].mobility.initialX = 2000m                     # Center of 4km × 4km area
*.gcs[*].mobility.initialY = 2000m
*.gcs[*].mobility.initialZ = 30m                       # Elevated (better coverage)

#-----------------------------------------------------------------------------------
# GCS Radio (higher power than drones)
#-----------------------------------------------------------------------------------
# Power: 50 mW (17 dBm) - 10× drone power for extended range
# Sensitivity: -80 dBm - improved for weak signals
# Ref: Bujari et al. (2017) "Flying ad-hoc network application scenarios"
*.gcs[*].numWlanInterfaces = 1
*.gcs[*].wlan[0].typename = "Ieee80211Interface"
*.gcs[*].wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"
*.gcs[*].wlan[0].radio.typename = "Ieee80211ScalarRadio"

# Radio frequency (same as drones for compatibility)
*.gcs[*].wlan[0].radio.bandName = "5 GHz"
*.gcs[*].wlan[0].radio.channel = 0
*.gcs[*].wlan[0].radio.carrierFrequency = 5.8GHz
*.gcs[*].wlan[0].radio.bandwidth = 20MHz

# Transmitter (GCS)
*.gcs[*].wlan[0].radio.transmitter.power = 50mW

# Receiver (GCS)
*.gcs[*].wlan[0].radio.receiver.sensitivity = -80dBm
*.gcs[*].wlan[0].radio.receiver.energyDetection = -85dBm
*.gcs[*].wlan[0].radio.receiver.snirThreshold = 6dB

# Network stack
*.gcs[*].hasIpv4 = true
*.gcs[*].hasUdp = true

# GCS Application - receives telemetry from all drones
*.gcs[*].numApps = 1
*.gcs[*].app[0].typename = "UdpSink"
*.gcs[*].app[0].localPort = 4000

#===================================================================================
# VISUALIZATION
#===================================================================================
*.visualizer.typename = "IntegratedCanvasVisualizer"

# Mobility visualization
*.visualizer.mobilityVisualizer.displayMovements = true
*.visualizer.mobilityVisualizer.displayPositions = true
*.visualizer.mobilityVisualizer.trailLength = 100

# Communication range (GCS only, to avoid visual clutter)
*.visualizer.mediumVisualizer.displayCommunicationRanges = true
*.gcs[*].wlan[0].radio.displayCommunicationRange = true
*.drone[*].wlan[0].radio.displayCommunicationRange = false

# Data link visualization (show active transmissions)
*.visualizer.dataLinkVisualizer.displayLinks = true
*.visualizer.dataLinkVisualizer.fadeOutMode = "simulationTime"
*.visualizer.dataLinkVisualizer.fadeOutTime = 1s
*.visualizer.dataLinkVisualizer.lineColor = "blue"

# Network route visualization (AODV routes)
*.visualizer.networkRouteVisualizer.displayRoutes = true
*.visualizer.networkRouteVisualizer.fadeOutMode = "simulationTime"
*.visualizer.networkRouteVisualizer.fadeOutTime = 5s
*.visualizer.networkRouteVisualizer.lineColor = "darkgreen"
*.visualizer.networkRouteVisualizer.lineStyle = "dashed"

#===================================================================================
# STATISTICS AND METRICS
#===================================================================================
# Collect network performance metrics for academic analysis
# Ref: Kurkowski et al. (2005) "MANET simulation studies: the incredibles"
#===================================================================================

**.scalar-recording = true
**.vector-recording = true

# AODV routing metrics
**.aodv.*.scalar-recording = true
**.aodv.*.vector-recording = true
**.routingTable.numRoutes:vector.vector-recording = true

# Application layer metrics
*.drone[*].app[0].packetSent:count.statistic-recording = true
*.drone[*].app[0].packetReceived:count.statistic-recording = true
*.drone[*].app[0].endToEndDelay:vector.statistic-recording = true

# Network layer metrics  
**.ipv4.**.numForwarded:count.statistic-recording = true
**.ipv4.**.numDropped:count.statistic-recording = true

# MAC/PHY layer metrics
*.drone[*].wlan[0].radio.receptionState:vector.statistic = "radioState"
**.wlan[0].mac.**.droppedPkBitError:count.statistic-recording = true

# UDP metrics
**.udp.packetSent:count.statistic-recording = true
**.udp.packetReceived:count.statistic-recording = true

#===================================================================================
# SIMULATION CONFIGURATION
#===================================================================================

[Config DroneSwarm5km]
extends = General
description = "Drone swarm SAR mission - 15 drones, 4km × 4km area"

# Configuration details:
#   - Area: 4000m × 4000m (16 km²) - balanced SAR coverage
#   - Drones: 15 UAVs (density ~0.94 drones/km²)
#   - Speed: 15 m/s (54 km/h) - energy-efficient cruise
#   - Radio: ~600-700m range (improved mesh connectivity)
#   - Multi-hop AODV routing for full area coverage
#
# Execute: ./run.sh DroneSwarm5km
# Execute (console): ./run-cmdenv.sh DroneSwarm5km
#
# Based on:
#   [3] Hayat et al. (2016) "Survey on UAV networks for disaster relief"
#   [4] Erdelj et al. (2017) "Help from the sky: Leveraging UAVs for disaster management"
#===================================================================================